package com.avizva.controller;

import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

import javax.servlet.http.HttpSession;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.avizva.enums.CategoryType;
import com.avizva.model.Category;
import com.avizva.model.Employee;
import com.avizva.model.Project;
import com.avizva.model.ReimbursementRequest;
import com.avizva.service.CategoryService;
import com.avizva.service.EmployeeService;
import com.avizva.service.ProjectService;
import com.avizva.service.ReimbursementRequestService;

@Controller
public class ReportController {

	private static final Logger LOGGER = LogManager.getLogger();

	@Autowired
	ReimbursementRequestService reimbursementRequestService;

	@Autowired
	EmployeeService employeeService;

	@Autowired
	CategoryService categoryService;
	@Autowired
	ProjectService projectService;

	@InitBinder
	public void initBinder(WebDataBinder binder) {
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		dateFormat.setLenient(false);
		binder.registerCustomEditor(Date.class, new CustomDateEditor(dateFormat, false));
	}

	private ModelAndView getModelandViewManager(List<ReimbursementRequest> reimbursementRequests) {
		List<Category> categories = categoryService.viewAllCategories();
		categories = categories.stream().filter(p -> {
			return p.getType() == CategoryType.NON_PAYROLL;
		}).collect(Collectors.toList());

		Double totalAmountApproved = new Double(0);
		Double totalAmountRequested = new Double(0);
		System.out.println("initial list" + reimbursementRequests);
		if (null != reimbursementRequests) {
			for (ReimbursementRequest reimbursementRequest : reimbursementRequests) {
				totalAmountApproved += reimbursementRequest.getAmountApproved();
				totalAmountRequested += reimbursementRequest.getAmountRequested();
			}
		}
		return new ModelAndView("managerreport").addObject("categories", categories)
				.addObject("reimbursementrequets", reimbursementRequests)
				.addObject("totalAmountRequested", totalAmountRequested)
				.addObject("totalAmountApproved", totalAmountApproved);
	}

	@RequestMapping("/reportingManager")
	public ModelAndView reportingManagercall(HttpSession session) {
		Employee employee = employeeService.getEmployeeById((Integer) session.getAttribute("id"));
		// String projectName = employeeService.getEmployeeById((Integer)
		// session.getAttribute("id"))
		// .getAssignedToProject().getName();

		String email = employeeService.getEmployeeById((Integer) session.getAttribute("id")).getEmail();
		LocalDate now = LocalDate.now(); // 2015-11-24
		LocalDate onemonthback = now.minusDays(1);
		Date enddate = java.sql.Date.valueOf(now);
		Date startdate = java.sql.Date.valueOf(onemonthback);
		Category category = new Category();
		Integer status = null;

		List<ReimbursementRequest> reimbursementRequests = reimbursementRequestService
				.viewAllReimbursementRequestbyFiltersManager(category, status, email, startdate, enddate);

		return getModelandViewManager(reimbursementRequests);
	}

	@RequestMapping("/generateReportManager")
	public ModelAndView GenerateReportcallManager(@RequestParam(value = "startdate", required = false) Date startDate,
			@RequestParam(value = "enddate", required = false) Date endDate,
			@RequestParam(value = "category", required = false) Integer categoryId,
			@RequestParam(value = "status", required = false) Integer status, HttpSession session) {
		String managerEmail = employeeService.getEmployeeById((Integer) session.getAttribute("id")).getEmail();

		Category category = new Category();
		category.setId(categoryId);
		LOGGER.info("----inside filter----");

		List<ReimbursementRequest> reimbursementRequests = reimbursementRequestService
				.viewAllReimbursementRequestbyFiltersManager(category, status, managerEmail, startDate, endDate);
		LOGGER.info("list" + reimbursementRequests);

		return getModelandViewManager(reimbursementRequests);
	}

	@RequestMapping("/reportingFinance")
	public ModelAndView reportingFinancecall(HttpSession session) {
		Employee employee = employeeService.getEmployeeById((Integer) session.getAttribute("id"));

		String email = employeeService.getEmployeeById((Integer) session.getAttribute("id")).getEmail();
		LocalDate now = LocalDate.now();
		LocalDate onemonthback = now.minusDays(1);
		Date enddate = java.sql.Date.valueOf(now);
		Date startdate = java.sql.Date.valueOf(onemonthback);
		Category category = new Category();
		Project project = new Project();
		Integer status = null;
		Integer type = null;

		List<ReimbursementRequest> reimbursementRequests = reimbursementRequestService
				.viewAllReimbursementRequestbyFiltersFinance(type, category, project, status, startdate, enddate);

		return getModelandViewFinance(reimbursementRequests);
	}

	private ModelAndView getModelandViewFinance(List<ReimbursementRequest> reimbursementRequests) {

		List<Category> categories = categoryService.viewAllCategories();
		List<Project> projects = projectService.getAllProject();
		Double totalAmountApproved = new Double(0);
		Double totalAmountRequested = new Double(0);
		System.out.println("initial list" + reimbursementRequests);
		if (null != reimbursementRequests) {
			for (ReimbursementRequest reimbursementRequest : reimbursementRequests) {
				totalAmountApproved += reimbursementRequest.getAmountApproved();
				totalAmountRequested += reimbursementRequest.getAmountRequested();
			}
		}
		return new ModelAndView("financereport").addObject("categories", categories).addObject("projects", projects)
				.addObject("reimbursementrequets", reimbursementRequests)
				.addObject("totalAmountRequested", totalAmountRequested)
				.addObject("totalAmountApproved", totalAmountApproved);

	}

	@RequestMapping("/generateReportFinance")
	public ModelAndView GenerateReportcallFinance(@RequestParam(value = "startdate", required = false) Date startDate,
			@RequestParam(value = "enddate", required = false) Date endDate,
			@RequestParam(value = "category", required = false) Integer categoryId,
			@RequestParam(value = "status", required = false) Integer status,
			@RequestParam(value = "project", required = false) Integer projectId,
			@RequestParam(value = "type", required = false) Integer type, HttpSession session) {

		Category category = new Category();
		Project project = new Project();
		category.setId(categoryId);
		project.setId(projectId);
		LOGGER.info("----inside filter----");

		List<ReimbursementRequest> reimbursementRequests = reimbursementRequestService
				.viewAllReimbursementRequestbyFiltersFinance(type, category, project, status, startDate, endDate);
		LOGGER.info("list" + reimbursementRequests);

		return getModelandViewFinance(reimbursementRequests);
	}
}
