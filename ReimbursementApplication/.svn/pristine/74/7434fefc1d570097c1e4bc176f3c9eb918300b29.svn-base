package com.avizva.controller;

import javax.servlet.http.HttpSession;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.avizva.exception.DaoException;
import com.avizva.model.Employee;
import com.avizva.service.DashboardFilter;
import com.avizva.service.EmployeeService;
import com.avizva.service.ReimbursementRequestService;
import com.avizva.utility.PasswordUtility;

/**
 * This controller maps the Login , User Registration , First Time password
 * Reset of the Employee
 * 
 * @author Campus2017
 *
 */
@Controller
public class LoginController {

	private static final Logger LOGGER = LogManager.getLogger();
	@Autowired
	DashboardFilter dashboardFilter;
	@Autowired
	EmployeeService employeeService;
	@Autowired
	ReimbursementRequestService reimbursementRequestService;
	@Value("${exception.custom.general.forgotPasswordAction}")
	private String forgotMessage;

	/**
	 * Calls the Index page which is the Login Page
	 * 
	 * @return ModelAndView
	 */
	@RequestMapping("/")
	public ModelAndView callLogin(HttpSession session) {
		if (session.getAttribute("id") != null) {
			return new ModelAndView("redirect:/dashboard");
		}
		return new ModelAndView("login");
	}

	/**
	 * Calls the Login Page
	 * 
	 * @return ModelAndView
	 */
	@RequestMapping("/loginpage")
	public ModelAndView callLoginPage() {
		return new ModelAndView("login");
	}

	/**
	 * Used to Authenticate the user and put its name , email , id and role in
	 * the session
	 * 
	 * @param email
	 * @param password
	 * @param session
	 * @return ModelAndView
	 */
	@RequestMapping("/login")
	public ModelAndView authenticateUser(@RequestParam("email") String email, @RequestParam("password") String password,
			HttpSession session) {
		Employee employee = employeeService.validate(email, password);

		if (employee != null) {
			session.setAttribute("name", employee.getFirstName());
			session.setAttribute("email", employee.getEmail());
			session.setAttribute("role", employee.getRole());
			session.setAttribute("id", employee.getId());
			if (employee.getFirstLogIn().booleanValue()) {
				return new ModelAndView("firstlogin").addObject("msg",
						"You Need To Change your password as this is your first time you are Logging in");
			}

			return new ModelAndView("redirect:/dashboard?msg=Logged In Successfully");
		}
		return new ModelAndView("login").addObject("msg", "Invalid Credentials");
	}

	/**
	 * Logouts the user and ends its session
	 * 
	 * @param session
	 * @return ModelAndView
	 */
	@RequestMapping("/logout")
	public ModelAndView callLogout(HttpSession session) {
		session.invalidate();
		return new ModelAndView("login").addObject("msg", "Logged Out Successfully");
	}

	/**
	 * Calls the registration page
	 * 
	 * @return ModelAndView
	 */
	@RequestMapping("/registration")
	public ModelAndView registerUser() {
		return new ModelAndView("register");
	}

	/**
	 * Resets the Password if the user logs in for the first time
	 * 
	 * @param password
	 * @param session
	 * @return ModelAndView
	 */
	@RequestMapping("/firsttimepassupdate")
	public ModelAndView updateFirstTimePassowrd(@RequestParam("password") String password, HttpSession session) {
		Employee employee = employeeService.getEmployeeByEmail((String) session.getAttribute("email"));
		employee.setPassword(PasswordUtility.encryptPassword(password));
		employee.setFirstLogIn(false);
		Employee updatedEmployee;
		try {
			updatedEmployee = employeeService.updateEmployee(employee,
					session.getAttribute("name") + " " + session.getAttribute("id"));
			if (updatedEmployee != null) {
				return new ModelAndView("redirect:/dashboard?msg=Password Updated Successfully");
			} else {
				return new ModelAndView("login").addObject("msg", "Error Updating Password Contact Your Administrator");
			}
		} catch (DaoException e) {
			return new ModelAndView("login").addObject("msg", "Error Updating Password Contact Your Administrator");
		}

	}

	/**
	 * Opens the Forgot Password page
	 * 
	 * @return ModelAndView
	 */
	@RequestMapping("/forgotpassword")
	public ModelAndView forgotPasswordPage() {
		LOGGER.info("Inside ForgotPassword Page");
		return new ModelAndView("forgotpassword");
	}

	@RequestMapping("/forgotpasswordform")
	public ModelAndView forgotPasswordForm(@RequestParam("email") String email, HttpSession session) {
		Employee employee;
		try {
			employee = employeeService.forgotPasswordAction(email);
			if (employee != null) {
				LOGGER.info("Password for User has been resetted :" + employee.getFirstName() + " "
						+ employee.getLastName());
				return new ModelAndView("login").addObject("msg",
						"Password Mailed to you successfully , you will be asked to changed the password on first login");
			} else {
				return new ModelAndView("forgotpassword").addObject("msg", "Invalid Email Id");
			}
		} catch (DaoException e) {
			return new ModelAndView("login").addObject("msg", forgotMessage);
		}

	}

}