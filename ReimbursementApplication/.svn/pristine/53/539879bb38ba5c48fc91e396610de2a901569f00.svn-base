package com.avizva.controller;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.io.IOUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.avizva.enums.RequestState;
import com.avizva.model.Employee;
import com.avizva.model.ReimbursementRequest;
import com.avizva.service.EmployeeService;
import com.avizva.service.FileTransferService;
import com.avizva.service.ReimbursementRequestService;
import com.avizva.utility.CreatePdf;
import com.avizva.utility.PasswordUtility;
import com.lowagie.text.Document;
import com.lowagie.text.DocumentException;
import com.lowagie.text.Element;
import com.lowagie.text.Paragraph;
import com.lowagie.text.Phrase;
import com.lowagie.text.pdf.PdfPCell;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfWriter;

@Controller
public class FileTransferController {
	private static final Logger LOGGER = LogManager.getLogger();

	@Autowired
	private FileTransferService fileTransferService;

	@Autowired
	private ReimbursementRequestService reimbursementRequestService;

	@Autowired
	private EmployeeService employeeService;

	@Value("${fileTransferService.fileDirectory}")
	private String fileDir;

	@RequestMapping(value = "/fileUpload", method = RequestMethod.POST, consumes = { "multipart/form-data" })
	@ResponseBody
	public String uploadInvoice(@RequestParam MultipartFile file) {
		LOGGER.debug(file.getSize());
		if (file.getSize() > 5242880) {
			return "sizebig";
		}
		String fileName = fileTransferService.uploadInvoiceImage(file);
		return fileName;
	}

	@RequestMapping(value = "/download", produces = { MediaType.IMAGE_JPEG_VALUE, MediaType.IMAGE_PNG_VALUE })
	@ResponseBody
	public byte[] downloadFile(@RequestParam("fileName") String fileName) {
		try {
			InputStream inputStream = new FileInputStream(fileDir + fileName);
			return IOUtils.toByteArray(inputStream);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;

	}

	@RequestMapping("/generatereport")
	public void generateReimbursementReport(@RequestParam("requestId") Integer requestId, HttpSession session,
			HttpServletResponse response, HttpServletRequest request) throws IOException, DocumentException {
		ReimbursementRequest req = reimbursementRequestService.viewRequestById(requestId);
		Employee employee = employeeService.getEmployeeById((Integer) session.getAttribute("id"));
		if (req.getEmployeeId() != employee.getId()) {

		} else {

			Document document = new Document();
			String justName = "_Report_For-" + requestId + "-" + PasswordUtility.generatePassword() + ".pdf";
			String filename = fileDir + justName;
			PdfWriter.getInstance(document, new FileOutputStream(filename));
			document.open();
			CreatePdf.addMetaData(document);

			Paragraph preface = new Paragraph();
			CreatePdf.creteEmptyLine(preface, 1);
			preface.add(new Paragraph("PDF Report"));

			document.add(preface);
			Paragraph paragraph = new Paragraph();
			CreatePdf.creteEmptyLine(paragraph, 2);
			document.add(paragraph);

			PdfPTable table = new PdfPTable(2);

			PdfPCell c1 = new PdfPCell(new Phrase("Request Id"));
			table.addCell(c1);
			table.addCell(req.getReimbursementId());

			c1 = new PdfPCell(new Phrase("Employee Name"));
			table.addCell(c1);
			table.addCell(employee.getFirstName() + " " + employee.getLastName());

			if (req.getState() != RequestState.DRAFT) {
				c1 = new PdfPCell(new Phrase("Submission Date"));
				table.addCell(c1);
				table.setHeaderRows(1);
				table.addCell(req.getSubmissionDate().toString());

			}
			c1 = new PdfPCell(new Phrase("Category"));
			table.addCell(c1);
			table.setHeaderRows(1);
			table.addCell(req.getCategory().getName());

			c1 = new PdfPCell(new Phrase("Amount Requested"));
			table.addCell(c1);
			table.setHeaderRows(1);
			table.addCell(req.getAmountRequested().toString());

			c1 = new PdfPCell(new Phrase("Amount Approved"));
			table.addCell(c1);
			table.setHeaderRows(1);
			table.addCell(req.getAmountApproved().toString());

			c1 = new PdfPCell(new Phrase("Status"));
			table.addCell(c1);
			table.setHeaderRows(1);
			table.addCell(req.getState().toString());

			table.setWidthPercentage(100);
			table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
			table.getDefaultCell().setVerticalAlignment(Element.ALIGN_MIDDLE);
			table.addCell(req.getReimbursementId());
			LOGGER.info(employee.getFirstName());

			CreatePdf.creteEmptyLine(preface, 1);

			document.add(table);

			Paragraph preface2 = new Paragraph();
			SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd/MM/yyyy");
			preface.add(new Paragraph("Report created on " + simpleDateFormat.format(new Date())));
			document.add(preface2);

			document.close();
			LOGGER.info(filename);

			Path file = Paths.get(fileDir, justName);

			if (Files.exists(file)) {
				response.setContentType("application/pdf");
				response.addHeader("Content-Disposition", "attachment; filename=" + justName);
			}
			try {
				Files.copy(file, response.getOutputStream());
				response.getOutputStream().flush();
			} catch (IOException ex) {
				ex.printStackTrace();
			}
		}

	}

	@RequestMapping("/downloadpdf")
	public void generatePdfReport(@RequestParam("fileName") String fileName, HttpSession session,
			HttpServletResponse response, HttpServletRequest request) throws IOException, DocumentException {

		LOGGER.info(fileName);
		Path file = Paths.get(fileDir, fileName);

		if (Files.exists(file)) {
			response.setContentType("application/pdf");
			response.addHeader("Content-Disposition", "attachment; filename=" + fileName);
		}
		try {
			Files.copy(file, response.getOutputStream());
			response.getOutputStream().flush();
		} catch (IOException ex) {
			ex.printStackTrace();
		}

	}

}
